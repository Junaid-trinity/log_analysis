from typing import List, Optional
from pydantic import BaseModel, Field
from enum import Enum
from typing import Dict, Any
from datetime import datetime



# -------------------------------Schema for Conversation-------------------------------
class Conversation:
    def __init__(self):
        """Initialize a new Conversation instance."""
        self.conversation_history = []
        self.trace_id = None
        self.query = None

    def set_trace_id(self, trace_id):
        self.trace_id = trace_id


# -------------------------------Schema for OpenAI Chat Completions Response-------------------------------
class ResponseType(str, Enum):
    """Enum for Response Type"""
    TEXT = "text"
    TOOL_CALL = "tool_call"
    STRUCTURED_OUTPUT = "structured_output"
    STREAMING_RESPONSE = "streaming_response"

class ToolCallSchema(BaseModel):
    """Schema for Tool Call"""
    function_name: str = Field(..., description="Name of the function.")
    function_arguments: Dict[str, Any] = Field({}, description="Arguments of the function.")

class ChatCompletionsResponseSchema(BaseModel):
    """Schema for OpenAI Chat Completions Response"""
    message: Optional[str] = Field(..., description="Message generated by the model.")
    streaming_response: Optional[Any] = Field(None, description="Streaming response.")
    response_type: ResponseType = Field(..., description="Type of response.")
    tool_calls: Optional[List[ToolCallSchema]] = Field([], description="Information about tool calls made by the model.")
    structured_output: Optional[Any] = Field({}, description="Structured output generated by the model.")
    generation_trace: Optional[Any] = Field({},description="Generation trace of the response.")
    metadata: Optional[Dict[str, Any]] = Field({}, description="Metadata associated with the response.")


# -------------------------------Schema for Agent Response-------------------------------
class AgentResponse(BaseModel):
    """Response generated by the Agent."""
    agent_name: str = Field(...,description="The name of the Agent.")
    message: Optional[str] = Field(..., description="Message generated by the model.")
    streaming_response: Optional[Any] = Field(None, description="Streaming response.")
    tool_calls: Optional[List[ToolCallSchema]] = Field([], description="Information about tool calls made by the model.")
    structured_output: Optional[Any] = Field({}, description="Structured output generated by the model.")
    generation_trace: Optional[Any] = Field({},description="Generation trace of the response.")
    metadata: Optional[Dict[str, Any]] = Field({}, description="Metadata associated with the response.")


# -------------------------------Schema for OpenAI Structured Outputs-------------------------------


class code_fix(BaseModel): 
    original_code : str
    corrected_code : str
class suggested_solutions (BaseModel):
    suggested_solution : str 
    code_fix : code_fix

class associatedmergerequests(BaseModel):
    associated_merge_requests: str


class DetailedResponse(BaseModel):
    heading: str
    Date: Optional[str] = None
    error_message: str
    line_number: Optional[int] = None
    file_impacted: Optional[str] = None
    possible_cause: str
    suggested_solutions:suggested_solutions
    associated_merge_requests: List[associatedmergerequests]

class DetailedResponseFull(BaseModel):
    DetailedResponseFull: List[DetailedResponse]
